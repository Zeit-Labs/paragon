{"version":3,"file":"component---src-pages-foundations-responsive-jsx-32778dbcd4c685e7faf1.js","mappings":"4PAOA,MAAMA,EAA0B,CAC9BC,WAAY,CAAEC,KAAM,cAAeC,WAAY,MAC/CC,MAAO,CAAEF,KAAM,QAASC,WAAY,MACpCE,OAAQ,CAAEH,KAAM,SAAUC,WAAY,MACtCG,MAAO,CAAEJ,KAAM,QAASC,WAAY,MACpCI,WAAY,CAAEL,KAAM,cAAeC,WAAY,MAC/CK,gBAAiB,CAAEN,KAAM,oBAAqBC,WAAY,QAKtDM,EAAiB,QAAC,IAAEC,GAAH,SAAa,4BAAOA,EAAIC,OAAOR,aAChDS,EAAe,QAAC,IAAEF,GAAH,SAAa,4BAAOA,EAAIC,OAAOE,SAAY,GAAEH,EAAIC,OAAOE,aAAe,MACtFC,EAAe,QAAC,IAAEJ,GAAH,SAAa,4BAAOA,EAAIC,OAAOI,SAAY,GAAEL,EAAIC,OAAOI,aAAe,MAiEtFC,EAAmB,CACvBN,IAAK,IAOPD,EAAeQ,aAAeD,EAC9BJ,EAAaK,aAAeD,EAC5BF,EAAaG,aAAeD,EAE5B,UA3EmB,KACjB,MAAME,EAAkBC,OAAOC,KAAKC,EAAAA,GAAaC,KAAIC,IACnD,MAAM,SAAEV,EAAF,SAAYE,GAAaM,EAAAA,EAAYE,GACrCC,EATwBD,CAAAA,GAAevB,EAAwBuB,IAAe,GAS7DE,CAAyBF,GAGhD,OAFAC,EAAeX,SAAWA,EAC1BW,EAAeT,SAAWA,EACnBS,KAGT,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAWE,KAAK,KAAKC,UAAU,QAE7B,gBAAC,IAAD,CAAKC,MAAM,eACX,wCACA,mDACA,sKAIA,gBAAC,IAAD,CACED,UAAU,yBACVE,KAAMX,EACNY,QAAS,CACP,CAAEC,OAAQ,aAAcC,SAAU,QAClC,CAAED,OAAQ,cAAeC,SAAU,aAAcC,KAAMxB,GACvD,CAAEsB,OAAQ,YAAaC,SAAU,WAAYC,KAAMrB,GACnD,CAAEmB,OAAQ,YAAaC,SAAU,WAAYC,KAAMnB,KAGrD,gBAAC,UAAD,OAEF,sBAAIa,UAAU,QAAd,eACA,gFACsD,iDADtD,cAGA,qEAC2C,kCAD3C,gBAGA,gBAAC,IAAD,CAAWA,UAAU,iBAClB,uFAEH,kEACwC,kCADxC,gBAGA,gBAAC,IAAD,CAAWA,UAAU,iBAClB","sources":["webpack://paragon-pattern-library-documentation/./src/pages/foundations/responsive.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DataTable, Container, breakpoints } from '~paragon-react'; // eslint-disable-line\nimport SEO from '../../components/SEO';\nimport Layout from '../../components/PageLayout';\nimport CodeBlock from '../../components/CodeBlock';\n\nconst BREAKPOINT_DESCRIPTIONS = {\n  extraSmall: { name: 'Extra small', identifier: 'xs' },\n  small: { name: 'Small', identifier: 'xs' },\n  medium: { name: 'Medium', identifier: 'md' },\n  large: { name: 'Large', identifier: 'lg' },\n  extraLarge: { name: 'Extra large', identifier: 'xl' },\n  extraExtraLarge: { name: 'Extra extra large', identifier: 'xxl' },\n};\n\nconst getBreakpointDescription = (breakpoint) => BREAKPOINT_DESCRIPTIONS[breakpoint] || {};\n\nconst IdentifierCell = ({ row }) => <code>{row.values.identifier}</code>;\nconst MinWidthCell = ({ row }) => <code>{row.values.minWidth ? `${row.values.minWidth}px` : '-'}</code>;\nconst MaxWidthCell = ({ row }) => <code>{row.values.maxWidth ? `${row.values.maxWidth}px` : '-'}</code>;\n\nconst Responsive = () => {\n  const breakpointsData = Object.keys(breakpoints).map(breakpoint => {\n    const { minWidth, maxWidth } = breakpoints[breakpoint];\n    const breakpointData = getBreakpointDescription(breakpoint);\n    breakpointData.minWidth = minWidth;\n    breakpointData.maxWidth = maxWidth;\n    return breakpointData;\n  });\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Responsive\" />\n        <h1>Responsive</h1>\n        <h2>Available breakpoints</h2>\n        <p>\n          Define the minimum and maximum dimensions at which your layout will change,\n          adapting to different screen sizes, for use in media queries.\n        </p>\n        <DataTable\n          className=\"pgn-doc__spacing-table\"\n          data={breakpointsData}\n          columns={[\n            { Header: 'Breakpoint', accessor: 'name' },\n            { Header: 'Class infix', accessor: 'identifier', Cell: IdentifierCell },\n            { Header: 'Min width', accessor: 'minWidth', Cell: MinWidthCell },\n            { Header: 'Max Width', accessor: 'maxWidth', Cell: MaxWidthCell },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n        <h2 className=\"mt-3\">Basic usage</h2>\n        <p>\n          To access or change the breakpoints in the scss use <code>$grid-breakpoints</code> variable.\n        </p>\n        <p>\n          Example when the screen is narrower than <code>md</code> breakpoint.\n        </p>\n        <CodeBlock className=\"language-scss\">\n          {'@include media-breakpoint-down(map-get($grid-breakpoints, \\'md\\')) { // styles here }'}\n        </CodeBlock>\n        <p>\n          Example when the screen is wider than <code>lg</code> breakpoint.\n        </p>\n        <CodeBlock className=\"language-scss\">\n          {'@include media-breakpoint-up(map-get($grid-breakpoints, \\'lg\\')) { // styles here }'}\n        </CodeBlock>\n      </Container>\n    </Layout>\n  );\n};\n\nconst cellPropTypes = {\n  row: PropTypes.shape({\n    values: PropTypes.shape({\n      identifier: PropTypes.string,\n      minWidth: PropTypes.number,\n      maxWidth: PropTypes.number,\n    }),\n  }),\n};\n\nconst cellDefaultProps = {\n  row: {},\n};\n\nIdentifierCell.propTypes = cellPropTypes;\nMinWidthCell.propTypes = cellPropTypes;\nMaxWidthCell.propTypes = cellPropTypes;\n\nIdentifierCell.defaultProps = cellDefaultProps;\nMinWidthCell.defaultProps = cellDefaultProps;\nMaxWidthCell.defaultProps = cellDefaultProps;\n\nexport default Responsive;\n"],"names":["BREAKPOINT_DESCRIPTIONS","extraSmall","name","identifier","small","medium","large","extraLarge","extraExtraLarge","IdentifierCell","row","values","MinWidthCell","minWidth","MaxWidthCell","maxWidth","cellDefaultProps","defaultProps","breakpointsData","Object","keys","breakpoints","map","breakpoint","breakpointData","getBreakpointDescription","size","className","title","data","columns","Header","accessor","Cell"],"sourceRoot":""}