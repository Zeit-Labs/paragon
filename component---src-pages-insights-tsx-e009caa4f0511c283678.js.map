{"version":3,"file":"component---src-pages-insights-tsx-e009caa4f0511c283678.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/utils/getGithubProjectUrl.ts","webpack://paragon-pattern-library-documentation/./src/pages/insights.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport { Hyperlink } from '~paragon-react';\n\nexport interface ISummaryUsageExamples {\n  row: {\n    original: {\n      usages: [],\n    },\n  }\n}\n\nconst SummaryUsageExamples = ({ row }: ISummaryUsageExamples) => {\n  interface IProjectUsages {\n    filePath: string,\n    line: number,\n  }\n\n  interface IComponentUsages {\n    name: string,\n    usages: [IProjectUsages],\n    repositoryUrl: string,\n  }\n  const componentUsages = row.original.usages;\n  const componentUsagesExample = componentUsages.map(({\n    name: projectName,\n    usages: projectUsages,\n    repositoryUrl,\n  }: IComponentUsages) => (\n    <div className=\"pgn-doc__summary-usages__project mb-4\" key={projectName}>\n      <h5 className=\"font-weight-bold\">{projectName}</h5>\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }: IProjectUsages) => (\n          <li key={`${filePath}L#${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ));\n\n  return <>{componentUsagesExample}</>;\n};\n\nSummaryUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SummaryUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport { Hyperlink } from '~paragon-react'; // eslint-disable-line\n\ntype IProjectUsages = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IProjectUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: { [key: string]: Array<IProjectUsages> },\n    },\n  },\n}\n\nfunction ProjectUsageExamples({ row }: IProjectUsageExamples) {\n  const { repositoryUrl, usages } = row.original;\n\n  const orderedComponentUsages: { [key: string]: Array<IProjectUsages> } = Object.keys(usages)\n    .sort().reduce((obj: { [index: string]: any }, key) => {\n    // eslint-disable-next-line no-param-reassign\n      obj[key] = usages[key];\n      return obj;\n    }, {});\n\n  return (\n    <>\n      {Object.keys(usages).length === 0 && (\n        <p>This project does not import any Paragon components, but may still use its SCSS styles.</p>\n      )}\n      {Object.entries(orderedComponentUsages).map(([componentName, usagesArray]) => (\n        <div className=\"pgn-doc__usages-modal mb-4\" key={componentName}>\n          <h5 className=\"font-weight-bold\">{componentName}</h5>\n          <ul className=\"list-unstyled\">\n            {usagesArray.map((usage) => (\n              <li key={`${usage.filePath}L#${usage.line}`}>\n                {repositoryUrl ? (\n                  <>\n                    <Hyperlink\n                      destination={`${repositoryUrl}/${usage.filePath}#L${usage.line}`}\n                      target=\"_blank\"\n                    >\n                      {usage.filePath}\n                    </Hyperlink>\n                    {' '}(line {usage.line})\n                  </>\n                ) : (\n                  <>{usage.filePath} (line {usage.line})</>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </>\n  );\n}\n\nProjectUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport { Hyperlink } from '~paragon-react'; // eslint-disable-line\n\ntype ProjectUsagesTypes = {\n  filePath: string,\n  line: number,\n};\n\nexport interface IComponentUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: Array<ProjectUsagesTypes>,\n    },\n  },\n}\n\nconst ComponentUsageExamples = ({ row }: IComponentUsageExamples) => {\n  const { repositoryUrl, usages } = row.original;\n\n  return (\n    <div className=\"pgn-doc__component-usage__project\">\n      <ul className=\"list-unstyled\">\n        {usages.map(usage => (\n          <li key={`${usage.filePath}#L${usage.line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${usage.filePath}#L${usage.line}`}\n                  target=\"_blank\"\n                >\n                  {usage.filePath}\n                </Hyperlink>\n                {' '}(line {usage.line})\n              </>\n            ) : (\n              <>{usage.filePath} (line {usage.line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nComponentUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ComponentUsageExamples;\n","const getGithubProjectUrl = (repository?: string | { type: string, url: string }): string | undefined => {\n  let repositoryUrl;\n  if (typeof repository === 'string') {\n    repositoryUrl = repository;\n  } else if (repository?.url) {\n    repositoryUrl = repository.url;\n  } else {\n    // unsupported repository field\n    return undefined;\n  }\n  const parts = repositoryUrl.split('/');\n  const githubDomainIndex = parts.findIndex((part: string) => part === 'github.com');\n  parts.splice(0, githubDomainIndex);\n  const parsedRepositoryUrl = parts.join('/').replace('.git', '');\n  return `https://${parsedRepositoryUrl}/blob/master`;\n};\n\nexport default getGithubProjectUrl;\n","import React, { useContext } from 'react';\nimport { navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport {\n  DataTable,\n  Tabs,\n  Tab,\n  Container,\n  TextFilter,\n  CheckboxFilter,\n  useMediaQuery,\n  breakpoints,\n  // @ts-ignore\n} from '~paragon-react'; // eslint-disable-line\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport SummaryUsageExamples, { ISummaryUsageExamples } from '../components/insights/SummaryUsageExamples';\nimport ProjectUsageExamples, { IProjectUsageExamples } from '../components/insights/ProjectUsageExamples';\nimport ComponentUsageExamples, { IComponentUsageExamples } from '../components/insights/ComponentUsageExamples';\nimport getGithubProjectUrl from '../utils/getGithubProjectUrl';\nimport dependentProjectsAnalysis from '../../../dependent-usage.json'; // eslint-disable-line\nimport { INSIGHTS_TABS, INSIGHTS_PAGES } from '../config';\nimport InsightsContext from '../context/InsightsContext';\n\nconst ICON_TYPE = 'Icon';\nconst TABLE_PAGE_SIZE = 10;\n\nconst {\n  lastModified: analysisLastUpdated,\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\ninterface IUsage {\n  filePath: string,\n  line: number,\n  column: number,\n  version: string,\n}\n\ninterface IDependentUsage {\n  version?: string,\n  name?: string,\n  repository?: { type: string, url: string },\n  repositoryUrl?: string,\n  count: number,\n  folderName?: string,\n  usages: {\n    [key: string]: IUsage[],\n  },\n}\n\ninterface IComponentUsageData {\n  componentUsageCount: number,\n  folderName: string,\n  name: string,\n  repositoryUrl: string,\n  usages: IUsage[],\n  version: string,\n}\n\ninterface IInsightsContext {\n  paragonTypes: {\n    [key: string]: string\n  },\n  isParagonIcon: Function,\n}\n\ninterface IFilterData {\n  name: string,\n  number: number | undefined,\n  value: string\n}\n\ninterface TabsDataType {\n  components: string[],\n  hooks: string[],\n  utils: string[],\n  icons: string[],\n}\n\nexport interface IComponentUsage {\n  name: string,\n  componentUsageInProjects: IComponentUsageData[],\n}\n\nconst dependentProjects: IDependentUsage[] = [];\n\nconst componentsUsage: { [key: string]: IComponentUsageData[] } = dependentProjectsUsages.reduce(\n  (accumulator: any, project: any) => {\n    dependentProjects.push({\n      ...project,\n      repositoryUrl: getGithubProjectUrl(project.repository),\n      count: Object.values<IUsage[]>(project.usages).reduce((acc, usage) => acc + usage.length, 0),\n    });\n\n    Object.keys(project.usages).forEach(componentName => {\n      if (!accumulator[componentName]) {\n        accumulator[componentName] = [];\n      }\n      accumulator[componentName] = accumulator[componentName].concat({\n        name: project.name,\n        folderName: project.folderName,\n        version: project.version,\n        repositoryUrl: getGithubProjectUrl(project.repository),\n        componentUsageCount: project.usages[componentName].length,\n        usages: project.usages[componentName],\n      });\n    });\n    return accumulator;\n  }, {},\n);\nconst componentsInUsage = Object.keys(componentsUsage);\n\nconst round = (n: number) => Math.round(n * 10) / 10;\n\nconst getEmptyMessage = (text: string) => `Currently there are no ${text} usage yet`;\n\nfunction SummaryUsage() {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const isMedium = useMediaQuery({ minWidth: breakpoints.large.minWidth });\n\n  const typeCount = Object.keys(paragonTypes).reduce(\n    (accumulator: { [key: string]: number | undefined }, componentName) => {\n      const type = paragonTypes[componentName] || (isParagonIcon(componentName) && ICON_TYPE);\n      if (componentsInUsage.includes(componentName)) {\n        accumulator[type] = (accumulator[type] || 0) + 1;\n      }\n      return accumulator;\n    }, {},\n  );\n\n  const filterValues: IFilterData[] = Object.keys(paragonTypes)\n    .map((key) => paragonTypes[key])\n    .filter((v, i, a) => a.indexOf(v) === i)\n    .map(type => ({ name: type, number: typeCount[type], value: type }));\n  // Number of Icons is calculated in the statement below. Initialized as `undefined` to not display '0'.\n  const iconsType: IFilterData = { name: ICON_TYPE, number: undefined, value: ICON_TYPE };\n\n  const summaryComponentsUsage = Object.entries<IComponentUsageData[]>(componentsUsage).map(\n    ([componentName, usages]) => {\n      const componentUsageCounts = usages.reduce(\n        (accumulator, project) => accumulator + project.componentUsageCount, 0,\n      );\n      let type = paragonTypes[componentName];\n      if (!type && isParagonIcon(componentName)) {\n        type = ICON_TYPE;\n        iconsType.number = (iconsType.number || 0) + 1;\n      }\n      return {\n        name: componentName,\n        count: componentUsageCounts,\n        usages: componentsUsage[componentName],\n        type,\n      };\n    },\n  );\n  filterValues.push(iconsType);\n  typeCount[ICON_TYPE] = iconsType.number;\n\n  const summaryTableData = summaryComponentsUsage.sort((a, b) => {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    return nameA < nameB ? -1 : 1;\n  });\n\n  const averageComponentsUsedPerProject = dependentProjects.reduce(\n    (accumulator, project) => accumulator + project.count, 0,\n  ) / dependentProjects.length;\n\n  return (\n    <div className=\"pt-5 mb-5\">\n      <div className=\"mb-5\">\n        <h2>Overview</h2>\n        <p>\n          Paragon is used by at least <strong>{dependentProjects.length} projects</strong>, with an average\n          of <strong>{round(averageComponentsUsedPerProject)} imports</strong> per project.\n        </p>\n      </div>\n      <h3>Overall usage</h3>\n      <DataTable\n        isPaginated\n        isExpandable\n        isSortable\n        showFiltersInSidebar={isMedium}\n        isFilterable\n        defaultColumnValues={{ Filter: TextFilter }}\n        itemCount={summaryTableData.length}\n        data={summaryTableData}\n        renderRowSubComponent={({ row }: ISummaryUsageExamples) => <SummaryUsageExamples row={row} />}\n        initialState={{ pageSize: TABLE_PAGE_SIZE }}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Component Name',\n            accessor: 'name',\n          },\n          {\n            Header: 'Instance Count',\n            accessor: 'count',\n            disableFilters: true,\n          },\n          {\n            Header: 'Type',\n            accessor: 'type',\n            Filter: CheckboxFilter,\n            filter: 'includesValue',\n            filterChoices: filterValues,\n          },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No summary available\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\n// Paragon version in all projects\nfunction ProjectsUsage() {\n  return (\n    <div className=\"pt-5 mb-5\">\n      <h3 className=\"mb-4\">Projects in Open edX consuming Paragon</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={dependentProjects.length}\n        data={dependentProjects}\n        renderRowSubComponent={({ row }: IProjectUsageExamples) => <ProjectUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Import Count', accessor: 'count' },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No projects\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n}\n\n// Usage info about a single component\nfunction ComponentUsage({ name, componentUsageInProjects }: IComponentUsage) {\n  return (\n    <div className=\"mb-5\">\n      <h3 className=\"mb-4\">{name}</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={componentUsageInProjects.length} // eslint-disable-line\n        data={componentUsageInProjects}\n        renderRowSubComponent={({ row }: IComponentUsageExamples) => <ComponentUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Project Name',\n            accessor: 'folderName',\n          },\n          { Header: 'Paragon Version', accessor: 'version' },\n          { Header: 'Instance Count', accessor: 'componentUsageCount' },\n        ]}\n      >\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No usages\" />\n      </DataTable>\n    </div>\n  );\n}\n\n// Usage info for all components\nfunction ComponentsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('components')}\n    </div>\n  );\n}\n\n// Usage info for all hooks\nfunction HooksUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('hooks')}\n    </div>\n  );\n}\n\n// Usage info for all utils\nfunction UtilsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\n// Usage info for all utils\nfunction IconsUsage({ data }: { data: string[] }) {\n  return (\n    <div className=\"pt-5 mb-5\">\n      {data.length ? data.sort().map(name => (\n        <ComponentUsage\n          key={name}\n          name={name}\n          componentUsageInProjects={componentsUsage[name]}\n        />\n      )) : getEmptyMessage('utils')}\n    </div>\n  );\n}\n\nexport default function InsightsPage({ pageContext: { tab } }: { pageContext: { tab: string } }) {\n  const { paragonTypes = {}, isParagonIcon = () => false } = useContext(InsightsContext) as IInsightsContext;\n  const {\n    components, hooks, utils, icons,\n  } = Object.keys(componentsUsage).reduce<TabsDataType>((acc, usage) => {\n    if (paragonTypes[usage] === 'Component') {\n      acc.components.push(usage);\n    } else if (paragonTypes[usage] === 'Hook') {\n      acc.hooks.push(usage);\n    } else if (['Text', 'Function', 'Object'].includes(paragonTypes[usage])) {\n      acc.utils.push(usage);\n    } else if (isParagonIcon(usage)) {\n      acc.icons.push(usage);\n    }\n    return acc;\n  }, {\n    components: [], hooks: [], utils: [], icons: [],\n  });\n\n  const handleOnSelect = (value: string) => {\n    if (value !== tab) {\n      global.analytics.track('Usage Insights', { tab: value });\n      navigate(INSIGHTS_PAGES.find(item => item.tab === value)!.path);\n    }\n  };\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Usage Insights\" />\n        <header className=\"mb-5\">\n          <h1>Usage Insights</h1>\n          <p>Last updated: {new Date(analysisLastUpdated).toLocaleDateString()}</p>\n        </header>\n        <Tabs\n          activeKey={tab}\n          id=\"uncontrolled-tab-example\"\n          onSelect={handleOnSelect}\n        >\n          <Tab eventKey={INSIGHTS_TABS.SUMMARY} title=\"Summary\">\n            {tab === INSIGHTS_TABS.SUMMARY && (\n              <SummaryUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.PROJECTS} title=\"Projects\">\n            {tab === INSIGHTS_TABS.PROJECTS && (\n              <ProjectsUsage />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.COMPONENTS} title=\"Components\">\n            {tab === INSIGHTS_TABS.COMPONENTS && (\n              <ComponentsUsage data={components} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.HOOKS} title=\"Hooks\">\n            {tab === INSIGHTS_TABS.HOOKS && (\n              <HooksUsage data={hooks} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.UTILS} title=\"Utils\">\n            {tab === INSIGHTS_TABS.UTILS && (\n              <UtilsUsage data={utils} />\n            )}\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.ICONS} title=\"Icons\">\n            {tab === INSIGHTS_TABS.ICONS && (\n              <IconsUsage data={icons} />\n            )}\n          </Tab>\n        </Tabs>\n      </Container>\n    </Layout>\n  );\n}\n\nInsightsPage.propTypes = {\n  pageContext: PropTypes.shape({\n    tab: PropTypes.oneOf(Object.values(INSIGHTS_TABS)),\n  }).isRequired,\n};\n\nComponentUsage.propTypes = {\n  name: PropTypes.string.isRequired,\n  componentUsageInProjects: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    folderName: PropTypes.string,\n    version: PropTypes.string,\n    repositoryUrl: PropTypes.string,\n    componentUsageCount: PropTypes.number,\n    usages: PropTypes.arrayOf(PropTypes.shape({\n      column: PropTypes.number,\n      filePath: PropTypes.string,\n      line: PropTypes.number,\n      version: PropTypes.string,\n    })),\n  })).isRequired,\n};\n\nconst usagePropTypes = {\n  data: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nComponentsUsage.propTypes = usagePropTypes;\nHooksUsage.propTypes = usagePropTypes;\nUtilsUsage.propTypes = usagePropTypes;\nIconsUsage.propTypes = usagePropTypes;\n"],"names":["row","componentUsagesExample","name","usages","repositoryUrl","className","key","projectName","projectUsages","line","filePath","destination","target","orderedComponentUsages","Object","obj","componentName","usagesArray","usage","repository","parts","githubDomainIndex","part","ICON_TYPE","lastModified","dependentProjectsUsages","dependentProjects","componentsUsage","accumulator","getGithubProjectUrl","project","count","acc","folderName","version","componentUsageCount","componentsInUsage","getEmptyMessage","text","SummaryUsage","paragonTypes","isParagonIcon","useContext","isMedium","useMediaQuery","minWidth","breakpoints","typeCount","type","filterValues","v","a","number","value","iconsType","summaryComponentsUsage","componentUsageCounts","summaryTableData","b","nameA","averageComponentsUsedPerProject","n","Math","isPaginated","isExpandable","isSortable","showFiltersInSidebar","isFilterable","defaultColumnValues","Filter","TextFilter","itemCount","data","renderRowSubComponent","initialState","pageSize","columns","id","Header","DataTable","Cell","accessor","disableFilters","filter","filterChoices","content","ProjectsUsage","ComponentUsage","componentUsageInProjects","ComponentsUsage","HooksUsage","UtilsUsage","IconsUsage","InsightsPage","pageContext","tab","icons","components","hooks","utils","size","title","Date","analysisLastUpdated","activeKey","onSelect","global","navigate","INSIGHTS_PAGES","item","eventKey","INSIGHTS_TABS"],"sourceRoot":""}