{"version":3,"file":"component---src-pages-foundations-typography-tsx-5ff470f41858d10d8bdd.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/MeasuredItem.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/measuredTypeProps.tsx","webpack://paragon-pattern-library-documentation/./src/components/TableCells.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Alignment.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Body.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/DecorationAndEmphasis.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Display.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Headings.tsx","webpack://paragon-pattern-library-documentation/./src/components/typography-page/Links.tsx","webpack://paragon-pattern-library-documentation/./src/pages/foundations/typography.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SettingsContext } from '../context/SettingsContext';\n\nexport interface IMeasuredItem {\n  properties: string[],\n  renderBefore?: Function,\n  renderAfter?: Function,\n  children: React.ReactNode,\n}\n\nconst initialMeasurements = {};\n\nconst MeasuredItem = ({\n  properties,\n  renderBefore,\n  renderAfter,\n  children,\n}: IMeasuredItem) => {\n  const { settings } = useContext(SettingsContext);\n  const { theme } = settings;\n  const [measurements, setMeasurements] = useState(initialMeasurements);\n  const itemRef = useRef();\n\n  useEffect(\n    () => {\n      const measure = () => {\n        if (!itemRef.current) {\n          return;\n        }\n        const computedStyle = getComputedStyle(itemRef.current);\n        const measurementsItems = properties.reduce((acc: { [x: string]: string; }, property: string) => {\n          acc[property] = computedStyle.getPropertyValue(property);\n          return acc;\n        }, {});\n        setMeasurements(measurementsItems);\n      };\n      // Needs a moment to finish switching theme and re-render children to DOM first.\n      setMeasurements(initialMeasurements);\n      const timeout = setTimeout(measure, 1000);\n      return () => clearTimeout(timeout);\n    },\n    [theme, properties],\n  );\n\n  return (\n    <>\n      {renderBefore ? renderBefore(measurements) : null}\n      {React.cloneElement(children as React.ReactElement, { ref: itemRef })}\n      {renderAfter ? renderAfter(measurements) : null}\n    </>\n  );\n};\n\nMeasuredItem.propTypes = {\n  properties: PropTypes.arrayOf(PropTypes.string),\n  renderBefore: PropTypes.func,\n  renderAfter: PropTypes.func,\n  children: PropTypes.node.isRequired,\n};\n\nMeasuredItem.defaultProps = {\n  properties: [],\n  renderBefore: undefined,\n  renderAfter: undefined,\n};\n\nexport default MeasuredItem;\n","import React from 'react';\n\nconst weightLabels: Record<string, string> = {\n  200: 'Light',\n  300: 'Light',\n  400: 'Regular',\n  500: 'Medium',\n  600: 'Medium',\n  700: 'Bold',\n  800: 'Black',\n};\n\nconst measuredTypeProps = {\n  properties: ['font-size', 'line-height', 'font-family', 'font-weight'],\n  renderAfter: (measurements: { [x: string]: string; }) => {\n    const fontFamily = measurements['font-family']\n      ? measurements['font-family'].split(',')[0]\n      : null;\n    const weight = weightLabels[measurements['font-weight']];\n    // only one significant digit if needed\n    const fontSize = Math.round(Number.parseFloat(measurements['font-size']) * 10) / 10;\n    const lineHeight = Math.round(Number.parseFloat(measurements['line-height']) * 10) / 10;\n\n    return (\n      <p className=\"m-0 text-muted\">\n        <span className=\"mr-2\">\n          {fontFamily} {weight}\n        </span>\n        {fontSize}px / {lineHeight}px\n      </p>\n    );\n  },\n};\n\nexport default measuredTypeProps;\n","import React from 'react';\nimport MeasuredItem from './MeasuredItem';\nimport measuredTypeProps from './typography-page/measuredTypeProps';\n\nexport type CodeCellType = {\n  value: string | number | undefined,\n};\n\nexport type DataTableRowType = {\n  row: {\n    original: {\n      name?: string,\n      size?: string,\n      className?: string,\n      text?: string,\n    }\n  },\n};\n\nexport function ClassNameCell({ value }: CodeCellType) {\n  if (!value) {\n    return null;\n  }\n\n  return (\n    <code className=\"fs-16\">\n      .{value}\n    </code>\n  );\n}\n\nexport function TextCell({ value }: CodeCellType) {\n  return (\n    <p className=\"m-0 fs-16\">\n      {value}\n    </p>\n  );\n}\n\nexport function CodeCell({ value }: CodeCellType) {\n  return (\n    <code className=\"fs-16\">\n      {value}\n    </code>\n  );\n}\n\nexport function DesktopMeasuredCell({ row } : DataTableRowType) {\n  return (\n    <MeasuredItem {...measuredTypeProps}>\n      <p className={`m-0 ${row.original.className}`}>\n        {row.original.text}\n      </p>\n    </MeasuredItem>\n  );\n}\n\nexport function MobileMeasuredCell({ row } : DataTableRowType) {\n  return (\n    <div className=\"mobile-type\">\n      <MeasuredItem {...measuredTypeProps}>\n        <p className={`m-0 ${row.original.className}`}>\n          {row.original.text}\n        </p>\n      </MeasuredItem>\n    </div>\n  );\n}\n\nexport function StyleCell({ row } : DataTableRowType) {\n  return (\n    <p className={`fs-16 ${row.original.className}`}>\n      {row.original.text}\n    </p>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\nimport { ClassNameCell, StyleCell } from '../TableCells';\n\nconst alignmentClassesAndDescriptions = [\n  { className: 'text-left', text: 'left text.' },\n  { className: 'text-right', text: 'right text.' },\n  { className: 'text-center', text: 'center text.' },\n  {\n    className: 'text-justify',\n    text: 'The text-justify class specifies the justification method of text. '\n        + 'This text-justify class spreads the words into the complete line with equal spaces.',\n  },\n  {\n    className: 'text-wrap',\n    text: 'Use text-wrap to cause text to wrap normally within an element. Newlines and spaces will be collapsed.',\n  },\n  {\n    className: 'text-nowrap',\n    text: 'Use text-nowrap to prevent text from wrapping within an element. Newlines and spaces will be collapsed. '\n        + 'You can prevent line breaks and text wrapping for specific elements',\n  },\n];\n\nexport default function Alignment() {\n  return (\n    <>\n      <h2 className=\"mb-4\">Alignment</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={6}\n          data={alignmentClassesAndDescriptions}\n          columns={[\n            {\n              Header: 'Style',\n              Cell: StyleCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport MeasuredItem from '../MeasuredItem';\nimport measuredTypeProps from './measuredTypeProps';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\n\nimport { DesktopMeasuredCell, ClassNameCell } from '../TableCells';\n\nconst bodyClassesAndDescriptions = [\n  { className: 'lead', text: 'Large Body' },\n  { className: '', text: 'Body' },\n  { className: 'small', text: 'Small Body' },\n  { className: 'x-small', text: 'Extra Small Body' },\n  { className: 'micro', text: 'Micro Body' },\n];\n\nexport default function Body() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Body</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={5}\n          data={bodyClassesAndDescriptions}\n          columns={[\n            {\n              Header: 'Desktop & Mobile',\n              Cell: DesktopMeasuredCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\nimport { ClassNameCell, StyleCell } from '../TableCells';\n\nconst decorationAndEmphasisClassesAndDescriptions = [\n  { className: 'text-lowercase', text: 'Lowercase text.' },\n  { className: 'text-uppercase', text: 'uppercase text.' },\n  { className: 'text-capitalize', text: 'capitalize text.' },\n  { className: 'text-decoration-none', text: 'No decorations.' },\n  { className: 'font-italic', text: 'Italic text.' },\n  { className: 'font-weight-bold', text: 'Bold text.' },\n  { className: 'font-weight-normal', text: 'Regular text.' },\n];\n\nexport default function DecorationAndEmphasis() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Decoration and Emphasis</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={7}\n          data={decorationAndEmphasisClassesAndDescriptions}\n          columns={[\n            {\n              Header: 'Style',\n              Cell: StyleCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\n\nimport { ClassNameCell, DesktopMeasuredCell, MobileMeasuredCell } from '../TableCells';\n\nconst displaySizes = [1, 2, 3, 4];\n\nexport default function Display() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Display</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={4}\n          data={displaySizes.map((size) => ({ text: `Display ${size}`, className: `display-${size}` }))}\n          columns={[\n            {\n              Header: 'Desktop',\n              Cell: DesktopMeasuredCell,\n            },\n            {\n              Header: 'Mobile',\n              Cell: MobileMeasuredCell,\n            },\n            {\n              id: 'css-class',\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\n\nimport { MobileMeasuredCell, ClassNameCell, DesktopMeasuredCell } from '../TableCells';\n\nconst headingSizes = [1, 2, 3, 4, 5, 6];\n\nexport default function Headings() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Headings</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={6}\n          data={headingSizes.map((size) => ({ text: `Heading ${size}`, className: `h${size}` }))}\n          columns={[\n            {\n              Header: 'Desktop',\n              Cell: DesktopMeasuredCell,\n            },\n            {\n              Header: 'Mobile',\n              Cell: MobileMeasuredCell,\n            },\n            {\n              Header: 'CSS Class',\n              accessor: 'className',\n              Cell: ClassNameCell,\n            },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n// @ts-ignore\nimport { DataTable } from '~paragon-react';\nimport { TextCell } from '../TableCells';\n\nconst linksClassesAndDescriptions = [\n  {\n    example: <a href=\"/#\">Standalone Link</a>,\n    description: <span>The default style for <code>a</code> tags that don`t appear in a <code>p</code> tag.</span>,\n  },\n  {\n    example: <span>An <a className=\"inline-link\" href=\"/foundations/typography/\">inline link</a> in a sentence.</span>,\n    description: <span>For links inside a <code>p</code> or with the <code>.inline-link</code> class name.</span>,\n  },\n  {\n    example: <a className=\"muted-link\" href=\"/#\">Muted, Standalone Link</a>,\n    description: <span><code>.muted-link</code> not in a <code>p</code> tag.</span>,\n  },\n  {\n    example: (\n      <span>\n        An <a className=\"muted-link inline-link\" href=\"/foundations/typography/\">muted, inline link</a> in a sentence.\n      </span>\n    ),\n    description: (\n      <span>\n        For <code>.muted-link</code> links inside a <code>p</code> or with the <code>.inline-link</code> class name.\n      </span>\n    ),\n  },\n];\n\nexport default function Links() {\n  return (\n    <>\n      <h2 className=\"mb-2\">Links</h2>\n      <div className=\"mb-4\">\n        <DataTable\n          itemCount={4}\n          data={linksClassesAndDescriptions}\n          columns={[\n            { Header: 'Example', accessor: 'example', Cell: TextCell },\n            { Header: 'Description', accessor: 'description', Cell: TextCell },\n          ]}\n        >\n          <DataTable.Table />\n        </DataTable>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport Layout from '../../components/PageLayout';\nimport SEO from '../../components/SEO';\n// @ts-ignore\nimport { Container } from '~paragon-react';\nimport {\n  HeadingsTable,\n  BodyTable,\n  DisplayTable,\n  DecorationAndEmphasisTable,\n  LinksTable,\n  AlignmentTable,\n} from '../../components/typography-page';\n\nexport default function TypographyPage() {\n  return (\n    <Layout>\n      <Container size=\"xl\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Typography\" />\n        <h1>Typography</h1>\n        <hr />\n        <HeadingsTable />\n        <BodyTable />\n        <DisplayTable />\n        <LinksTable />\n        <DecorationAndEmphasisTable />\n        <AlignmentTable />\n      </Container>\n    </Layout>\n  );\n}\n"],"names":["initialMeasurements","MeasuredItem","children","settings","useContext","theme","setMeasurements","useState","itemRef","useRef","useEffect","timeout","setTimeout","computedStyle","getComputedStyle","measurementsItems","properties","acc","clearTimeout","renderBefore","ref","renderAfter","undefined","weightLabels","measurements","fontFamily","weight","fontSize","Math","Number","lineHeight","className","ClassNameCell","value","TextCell","CodeCell","DesktopMeasuredCell","row","MobileMeasuredCell","StyleCell","alignmentClassesAndDescriptions","text","Alignment","itemCount","data","columns","Header","Cell","accessor","DataTable","bodyClassesAndDescriptions","Body","decorationAndEmphasisClassesAndDescriptions","DecorationAndEmphasis","displaySizes","Display","size","id","headingSizes","Headings","linksClassesAndDescriptions","example","href","description","Links","TypographyPage","title"],"sourceRoot":""}