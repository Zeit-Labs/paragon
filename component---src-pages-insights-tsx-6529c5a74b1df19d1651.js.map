{"version":3,"file":"component---src-pages-insights-tsx-6529c5a74b1df19d1651.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsageExamples.tsx","webpack://paragon-pattern-library-documentation/./src/utils/getGithubProjectUrl.ts","webpack://paragon-pattern-library-documentation/./src/pages/insights.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport { Hyperlink } from '~paragon-react';\n\nexport interface ISummaryUsageExamples {\n  row: {\n    original: {\n      usages: [],\n    },\n  }\n}\n\nconst SummaryUsageExamples = ({ row }: ISummaryUsageExamples) => {\n  interface IProjectUsages {\n    filePath: string,\n    line: number,\n  }\n\n  interface IComponentUsages {\n    name: string,\n    usages: [IProjectUsages],\n    repositoryUrl: string,\n  }\n  const componentUsages = row.original.usages;\n  const componentUsagesExample = componentUsages.map(({\n    name: projectName,\n    usages: projectUsages,\n    repositoryUrl,\n  }: IComponentUsages) => (\n    <div className=\"pgn-doc__summary-usages__project mb-4\" key={projectName}>\n      <h5 className=\"font-weight-bold\">{projectName}</h5>\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }: IProjectUsages) => (\n          <li key={`${filePath}L#${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ));\n\n  return <>{componentUsagesExample}</>;\n};\n\nSummaryUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SummaryUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport { Hyperlink } from '~paragon-react';\n\nexport interface IProjectUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: {},\n    },\n  },\n}\n\nconst ProjectUsageExamples = ({ row }: IProjectUsageExamples) => {\n  const componentUsages: { [key: string]: [] } = row.original.usages;\n  const repositoryUrl = row.original;\n\n  interface IProjectUsages {\n    filePath: string,\n    line: number,\n  }\n\n  return (\n    <>\n      {Object.keys(componentUsages).length === 0 && (\n        <p>This project does not import any Paragon components, but may still use its SCSS styles.</p>\n      )}\n      {Object.entries(componentUsages).map(([componentName, componentUsages]) => (\n        <div className=\"pgn-doc__usages-modal mb-4\" key={componentName}>\n          <h5 className=\"font-weight-bold\">{componentName}</h5>\n          <ul className=\"list-unstyled\">\n            {componentUsages.map(({\n              filePath,\n              line,\n            }: IProjectUsages) => (\n              <li key={`${filePath}L#${line}`}>\n                {repositoryUrl ? (\n                  <>\n                    <Hyperlink\n                      destination={`${repositoryUrl}/${filePath}#L${line}`}\n                      target=\"_blank\"\n                    >\n                      {filePath}\n                    </Hyperlink>\n                    {' '}(line {line})\n                  </>\n                ) : (\n                  <>{filePath} (line {line})</>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </>\n  );\n};\n\nProjectUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// @ts-ignore\nimport { Hyperlink } from '~paragon-react';\n\nexport interface IComponentUsageExamples {\n  row: {\n    original: {\n      name: string,\n      repositoryUrl?: string,\n      usages: {},\n    },\n  },\n}\n\nconst ComponentUsageExamples = ({ row }: IComponentUsageExamples) => {\n  const repositoryUrl = row.original;\n  const projectUsages: { [key: string]: Function } = row.original.usages;\n\n  type ProjectUsagesTypes = {\n    filePath: string,\n    line: number,\n  };\n\n  return (\n    <div className=\"pgn-doc__component-usage__project\">\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }: ProjectUsagesTypes) => (\n          <li key={`${filePath}#L${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nComponentUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ComponentUsageExamples;\n","const getGithubProjectUrl = (repository?: string | { type: string, url: string }): string | undefined => {\n  let repositoryUrl;\n  if (typeof repository === 'string') {\n    repositoryUrl = repository;\n  } else if (repository?.url) {\n    repositoryUrl = repository.url;\n  } else {\n    // unsupported repository field\n    return undefined;\n  }\n  const parts = repositoryUrl.split('/');\n  const githubDomainIndex = parts.findIndex((part: string) => part === 'github.com');\n  parts.splice(0, githubDomainIndex);\n  const parsedRepositoryUrl = parts.join('/').replace('.git', '');\n  return `https://${parsedRepositoryUrl}/blob/master`;\n};\n\nexport default getGithubProjectUrl;\n","import React from 'react';\nimport { navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport {\n  DataTable,\n  Tabs,\n  Tab,\n  Container,\n  // @ts-ignore\n} from '~paragon-react'; // eslint-disable-line\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport SummaryUsageExamples from '../components/insights/SummaryUsageExamples';\nimport ProjectUsageExamples from '../components/insights/ProjectUsageExamples';\nimport ComponentUsageExamples from '../components/insights/ComponentUsageExamples';\nimport getGithubProjectUrl from '../utils/getGithubProjectUrl';\nimport dependentProjectsAnalysis from '../../../dependent-usage.json';\nimport { INSIGHTS_TABS, INSIGHTS_PAGES } from '../config';\n\nconst {\n  lastModified: analysisLastUpdated,\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\ninterface IUsage {\n  filePath: string,\n  line: number,\n  column: number,\n  version: string\n}\n\ninterface IDependentUsage {\n  version?: string,\n  name?: string,\n  repository?: { type: string, url: string } | string,\n  folderName?: string,\n  usages: {\n    [key: string]: IUsage[] | undefined,\n  },\n}\n\nconst dependentProjects = dependentProjectsUsages.map((dependentUsage: IDependentUsage) => ({\n  ...dependentUsage,\n  repositoryUrl: getGithubProjectUrl(dependentUsage.repository),\n  count: Object.values(dependentUsage.usages).reduce((accumulator, usage) => accumulator + usage!.length, 0),\n}));\n\nconst componentsUsage = dependentProjectsUsages.reduce((accumulator: any, project: any) => {\n  Object.keys(project.usages).forEach((componentName) => {\n    if (!accumulator[componentName]) {\n      accumulator[componentName] = [];\n    }\n    accumulator[componentName] = accumulator[componentName].concat({\n      name: project.name,\n      folderName: project.folderName,\n      version: project.version,\n      repositoryUrl: getGithubProjectUrl(project.repository),\n      componentUsageCount: project.usages[componentName].length,\n      usages: project.usages[componentName],\n    });\n  });\n  return accumulator;\n}, {});\n\nconst summaryComponentsUsage = Object.entries(componentsUsage).map(([componentName, usages]: [string, any]) => {\n  const componentUsageCounts = usages\n    .reduce((accumulator: number, project: any) => accumulator + project.componentUsageCount, 0);\n  return {\n    name: componentName,\n    count: componentUsageCounts,\n    usages: componentsUsage[componentName],\n  };\n});\n\nconst SummaryUsage = () => {\n  const summaryTableData = summaryComponentsUsage.sort((a, b) => {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    // eslint-disable-next-line no-nested-ternary\n    return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n  });\n  const round = (n: number) => Math.round(n * 10) / 10;\n  const averageComponentsUsedPerProject = dependentProjects\n    .reduce((accumulator, project) => accumulator + project.count, 0) / dependentProjects.length;\n    type RowType = {\n      row: {\n        original: {\n          name: string,\n          repositoryUrl: string,\n          usages: [],\n        }\n      }\n    };\n    return (\n      <div className=\"pt-5 mb-5\">\n        <div className=\"mb-5\">\n          <h2>Overview</h2>\n          <p>\n            Paragon is used by at least <strong>{dependentProjects.length} projects</strong>, with an average\n            of <strong>{round(averageComponentsUsedPerProject)} component instances</strong> per project.\n          </p>\n        </div>\n        <h3>Overall component usage</h3>\n        <DataTable\n          isExpandable\n          isSortable\n          itemCount={summaryTableData.length}\n          data={summaryTableData}\n          renderRowSubComponent={({ row }: RowType) => <SummaryUsageExamples row={row} />}\n          columns={[\n            {\n              id: 'expander',\n              Header: DataTable.ExpandAll,\n              Cell: DataTable.ExpandRow,\n            },\n            {\n              Header: 'Component Name',\n              accessor: 'name',\n            },\n            { Header: 'Instance Count', accessor: 'count' },\n          ]}\n        >\n          <DataTable.TableControlBar />\n          <DataTable.Table />\n          <DataTable.EmptyTable content=\"No summary available\" />\n          <DataTable.TableFooter />\n        </DataTable>\n      </div>\n    );\n};\n\n// Paragon version in all projects\nconst ProjectsUsage = () => {\n    type RowType = {\n      row: {\n        original: {\n          name: string,\n          repositoryUrl: string,\n          usages: Array<{\n            filePath: string,\n            line: number,\n          }>\n        }\n      }\n    };\n    return (\n      <div className=\"pt-5 mb-5\">\n        <h3 className=\"mb-4\">Projects in Open edX consuming Paragon</h3>\n        <DataTable\n          isExpandable\n          isSortable\n          itemCount={dependentProjects.length}\n          data={dependentProjects}\n          renderRowSubComponent={({ row }: RowType) => <ProjectUsageExamples row={row} />}\n          columns={[\n            {\n              id: 'expander',\n              Header: DataTable.ExpandAll,\n              Cell: DataTable.ExpandRow,\n            },\n            {\n              Header: 'Project Name',\n              accessor: 'folderName',\n            },\n            { Header: 'Paragon Version', accessor: 'version' },\n            { Header: 'Instance Count', accessor: 'count' },\n          ]}\n        >\n          <DataTable.TableControlBar />\n          <DataTable.Table />\n          <DataTable.EmptyTable content=\"No projects\" />\n          <DataTable.TableFooter />\n        </DataTable>\n      </div>\n    );\n};\n\nexport interface IComponentUsage {\n  name: string,\n  componentUsageInProjects: IUsage[],\n}\n\n// Usage info about a single component\nconst ComponentUsage = ({ name, componentUsageInProjects }: IComponentUsage) => {\n    type RowType = {\n      row: {\n        original: {\n          name: string,\n          repositoryUrl: string,\n          usages: Array<{\n            filePath: string,\n            line: number,\n          }>\n        }\n      }\n    };\n    return (\n      <div className=\"mb-5\">\n        <h3 className=\"mb-4\">{name}</h3>\n        <DataTable\n          isExpandable\n          isSortable\n          itemCount={componentUsageInProjects!.length}\n          data={componentUsageInProjects}\n          renderRowSubComponent={({ row }: RowType) => <ComponentUsageExamples row={row} />}\n          columns={[\n            {\n              id: 'expander',\n              Header: DataTable.ExpandAll,\n              Cell: DataTable.ExpandRow,\n            },\n            {\n              Header: 'Project Name',\n              accessor: 'folderName',\n            },\n            { Header: 'Paragon Version', accessor: 'version' },\n            { Header: 'Instance Count', accessor: 'componentUsageCount' },\n          ]}\n        >\n          <DataTable.Table />\n          <DataTable.EmptyTable content=\"No usages\" />\n        </DataTable>\n      </div>\n    );\n};\n\n// Usage info for all components\nconst ComponentsUsage = () => (\n  <div className=\"pt-5 mb-5\">\n    {Object.keys(componentsUsage).sort().map(name => (\n      <ComponentUsage\n        key={name}\n        name={name}\n        componentUsageInProjects={componentsUsage[name]}\n      />\n    ))}\n  </div>\n);\n\nexport type InsightsPageTypes = {\n  pageContext: {\n    tab: string,\n  }\n};\n\nexport default function InsightsPage({ pageContext: { tab } }: InsightsPageTypes) {\n  const handleOnSelect = (value: string) => {\n    if (value !== tab) {\n      global.analytics.track('Usage Insights', { tab: value });\n      // @ts-ignore\n      navigate(INSIGHTS_PAGES.find(item => item.tab === value).path);\n    }\n  };\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Usage Insights\" />\n        <header className=\"mb-5\">\n          <h1>Usage Insights</h1>\n          <p>Last updated: {new Date(analysisLastUpdated).toLocaleDateString()}</p>\n        </header>\n        <Tabs\n          activeKey={tab}\n          id=\"uncontrolled-tab-example\"\n          onSelect={handleOnSelect}\n        >\n          <Tab eventKey={INSIGHTS_TABS.SUMMARY} title=\"Summary\">\n            <SummaryUsage />\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.PROJECTS} title=\"Projects\">\n            <ProjectsUsage />\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.COMPONENTS} title=\"Components\">\n            <ComponentsUsage />\n          </Tab>\n        </Tabs>\n      </Container>\n    </Layout>\n  );\n}\n\nInsightsPage.propTypes = {\n  pageContext: PropTypes.shape({\n    tab: PropTypes.oneOf(Object.values(INSIGHTS_TABS)),\n  }).isRequired,\n};\n"],"names":["row","componentUsagesExample","name","usages","repositoryUrl","className","key","projectName","projectUsages","line","filePath","destination","target","componentUsages","Object","componentName","repository","parts","githubDomainIndex","part","lastModified","dependentProjectsUsages","dependentProjects","dependentUsage","getGithubProjectUrl","count","accumulator","usage","componentsUsage","project","folderName","version","componentUsageCount","summaryComponentsUsage","SummaryUsage","summaryTableData","a","nameA","nameB","b","averageComponentsUsedPerProject","n","Math","isExpandable","isSortable","itemCount","data","renderRowSubComponent","columns","id","Header","DataTable","Cell","accessor","content","ProjectsUsage","ComponentUsage","componentUsageInProjects","ComponentsUsage","InsightsPage","pageContext","tab","size","title","Date","analysisLastUpdated","activeKey","onSelect","value","global","navigate","INSIGHTS_PAGES","item","eventKey","INSIGHTS_TABS"],"sourceRoot":""}